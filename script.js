// ================== N√∫t troll ====================
const btn = document.querySelector(".btn");
const msg = document.querySelector(".message");
const cayText = document.getElementById("cay-text");
const trollAudio = document.getElementById("troll-audio");

let clicked = false;
let trollMode = false;
let hoverTimer = null;
let trollStarted = false;

// N·∫øu click k·ªãp th√¨ hi·ªán message
btn.addEventListener("click", (e) => {
  e.preventDefault();
  if (trollMode) return;
  clicked = true;
  msg.style.display = "block";
  btn.style.display = "none";
});

// Khi hover v√†o n√∫t
btn.addEventListener("mouseenter", () => {
  if (trollMode) {
    startTroll();
    return;
  }
  hoverTimer = setTimeout(() => {
    if (!clicked) {
      trollMode = true;
      startTroll();
    }
  }, 500);
});

// Reset n·∫øu r·ªùi kh·ªèi tr∆∞·ªõc khi h·∫øt 0.5s
btn.addEventListener("mouseleave", () => {
  clearTimeout(hoverTimer);
});

// H√†m troll
function startTroll() {
  if (trollStarted) return;
  trollStarted = true;

  btn.addEventListener("mousemove", () => {
    const maxX = window.innerWidth - btn.offsetWidth;
    const maxY = window.innerHeight - btn.offsetHeight;
    btn.style.position = "absolute";
    btn.style.left = Math.random() * maxX + "px";
    btn.style.top = Math.random() * maxY + "px";
  });

  setTimeout(() => {
    cayText.style.display = "block";
    trollAudio.play();
  }, 3000);
}

// ================== Popup gi·ªõi thi·ªáu ====================
window.onload = function () {
  const popup = document.getElementById("popup");
  const closeBtn = document.getElementById("closePopup");
  popup.style.display = "flex";
  closeBtn.addEventListener("click", () => {
    popup.style.display = "none";
    typeText("type-me", "m√¨nh l√† Anhtt - web coding newbie :))", 50);
  });
};

function typeText(id, text, speed = 50) {
  const element = document.getElementById(id);
  if (!element) return;
  element.textContent = "";
  let index = 0;
  (function type() {
    if (index < text.length) {
      element.textContent += text.charAt(index++);
      setTimeout(type, speed);
    }
  })();
}

// ================== Music Player ====================
const music = document.getElementById("music");
const playBtn = document.querySelector(".play-btn");
const progress = document.querySelector(".progress");
const icon = playBtn.querySelector(".icon");

playBtn.addEventListener("click", () => {
  if (music.paused) {
    music.play();
    icon.textContent = "‚è∏";
  } else {
    music.pause();
    icon.textContent = "‚ñ∂";
  }
});

music.addEventListener("timeupdate", () => {
  if (music.duration) {
    progress.value = (music.currentTime / music.duration) * 100;
  }
});

progress.addEventListener("input", () => {
  if (music.duration) {
    music.currentTime = (progress.value / 100) * music.duration;
  }
});

// ================== Hi·ªáu ·ª©ng n·ªÅn ====================
VANTA.BIRDS({
  el: "body",
  mouseControls: true,
  touchControls: true,
  gyroControls: false,
  minHeight: 200.0,
  minWidth: 200.0,
  scale: 1.0,
  scaleMobile: 1.0
});

// Reset ch·ªØ ch·∫°y khi load
window.addEventListener("DOMContentLoaded", () => {
  const span = document.querySelector(".song-overlay span");
  resetMarqueeAnimation(span);
});

// ================== Playlist ====================
const moreBtn = document.querySelector(".more-btn");
const playlistEl = document.querySelector(".playlist");
const songTitleEl = document.querySelector(".song-overlay span");

// Danh s√°ch t·∫•t c·∫£ b√†i h√°t
const allSongs = [
  "Ch·∫≥ng C√≤n Th·ªùi Gian ·∫§y ~ Bem ft. Nguyen, ImPoe.mp3",
  "Ch√∫ng Ta C·ªßa Hi·ªán T·∫°i ~ S∆°n T√πng M-TP.mp3",
  "Ch√∫ng Ta C·ªßa T∆∞∆°ng Lai ~ S∆°n T√πng M-TP.mp3",
  "V√πng K√Ω ·ª®c ~ Chillies.mp3",
  "C√≥ Em ~ Madihu (Feat. Low G).mp3",
  "V√¨ Anh ƒê√¢u C√≥ Bi·∫øt ~ Madihu (Feat. V≈©.).mp3",
  "B√¨nh Y√™n ~ V≈©. ft. Binz.mp3",
  "Nh·ªØng L·ªùi H·ª©a B·ªè Qu√™n ~ V≈©. x Dear Jane.mp3",
  "Kho B√°u ~ (S)TRONG Tr·ªçng Hi·∫øu x Rhymastic.mp3",
  "Th·∫±ng ƒêi√™n ~ Justatee x Ph∆∞∆°ng Ly.mp3",
  "M√£i M√£i Kh√¥ng Ph·∫£i Anh ~ Thanh B√¨nh.mp3",
  "Bao Ti·ªÅn M·ªôt M·ªõ B√¨nh Y√™n ~ 14 Casper & Bon Nghi√™m.mp3",
  "M·ªôt ƒê·ªùi ~ 14 Casper & Bon Nghi√™m (feat. buitruonglinh).mp3",
  "√Ånh Sao V√† B·∫ßu Tr·ªùi ~ T.R.I x C√°.mp3",
  "V·∫øt Th∆∞∆°ng ~ Fishy.mp3",
  "Tr∆∞·ªõc Khi Em T·ªìn T·∫°i (Piano Version) ~ Th·∫ØngÔΩúVi·ªát Anh Cover.mp3",
  "ƒë·ªÉ t√¥i √¥m em b·∫±ng giai ƒëi·ªáu n√†y ~ KAI ƒêINH x MIN x GREY D.mp3",
  "Ph√©p M√†u (ƒê√†n C√° G·ªó OST) ~ Mounter x MAYDAYs, Minh T·ªëc.mp3",
  "ƒê∆∞·ªùng T√¥i Ch·ªü Em V·ªÅ ~ buitruonglinh.mp3",
  "D√π Cho Mai V·ªÅ Sau (Official Music Video) ~ buitruonglinh.mp3",
  "ChƒÉm Hoa ~ MONO.mp3",
  "B·∫ßu Tr·ªùi M·ªõi ~ Da LAB  ft. Minh T·ªëc & Lam.mp3",
  "Dancing In The Dark ~ SOOBIN.mp3",
  "Xe ƒê·∫°p ~ Th√πy Chi ft. M4U.mp3",
  "Em C√≤n Nh·ªõ Anh Kh√¥ng ~ Ho√†ng T√¥n (Feat. Koo).mp3",
  "W‚ß∏n - id 072019 ÔΩú 3107 ft 267.mp3",
  "N·∫ÆNG LUNG LINH - NGUY·ªÑN TH∆Ø∆†NG (OFFICIAL MUSIC VIDEO).mp3",
  "c√≥ h·∫πn v·ªõi thanh xu√¢n - MONSTAR ÔΩú official music video.mp3",
  "KARIK - B·∫†N ƒê·ªúI (FT. GDUCKY) ÔΩú OFFICIAL MUSIC VIDEO.mp3",
  "G√°c l·∫°i √¢u lo - Da LAB ft. Miu L√™ (Official MV).mp3",
  "H·∫† C√íN V∆Ø∆†NG N·∫ÆNG ÔΩú DATKAA x KIDO x Prod. QT BEATZ [OFFICIAL MUSIC VIDEO].mp3",
  "C√≥ Ch√†ng Trai Vi·∫øt L√™n C√¢y - Phan M·∫°nh Qu·ª≥nh ÔΩú M·∫ÆT BI·∫æC OST.mp3",
  "tlinh - n·∫øu l√∫c ƒë√≥ (ft. 2pillz) ÔΩú OFFICIAL MUSIC VIDEO.mp3",
  "W‚ß∏n - Text 07 (ft. 267).mp3",
  "W‚ß∏n  -  a b c d x y z n m a s a d (song 24) ÔΩú 3107.mp3",
];

// Tao th√≠ch
const favoriteSongs = [
  "Ch·∫≥ng C√≤n Th·ªùi Gian ·∫§y ~ Bem ft. Nguyen, ImPoe.mp3",
  "√Ånh Sao V√† B·∫ßu Tr·ªùi ~ T.R.I x C√°.mp3",
  "Tr∆∞·ªõc Khi Em T·ªìn T·∫°i (Piano Version) ~ Th·∫ØngÔΩúVi·ªát Anh Cover.mp3",
  "ƒê∆∞·ªùng T√¥i Ch·ªü Em V·ªÅ ~ buitruonglinh.mp3",
  "B√¨nh Y√™n ~ V≈©. ft. Binz.mp3",
  "M√£i M√£i Kh√¥ng Ph·∫£i Anh ~ Thanh B√¨nh.mp3",
];

let currentTab = "all"; // 'all' ho·∫∑c 'favorites'

// ----- UI -----
const tabsContainer = document.createElement("div");
tabsContainer.classList.add("playlist-tabs");

const allTabBtn = document.createElement("button");
allTabBtn.textContent = "L√≠t";
allTabBtn.classList.add("tab-btn", "active");

const favTabBtn = document.createElement("button");
favTabBtn.textContent = "B√†i h√°t ad th√≠ch";
favTabBtn.classList.add("tab-btn");

tabsContainer.appendChild(allTabBtn);
tabsContainer.appendChild(favTabBtn);
playlistEl.appendChild(tabsContainer);

// Search
const searchInput = document.createElement("input");
searchInput.type = "text";
searchInput.placeholder = "T√¨m b√†i h√°t... (ƒë·ª´ng vi·∫øt t·∫ØtüôÇ)";
searchInput.classList.add("playlist-search");
playlistEl.appendChild(searchInput);

// Container list
const playlistItemsContainer = document.createElement("div");
playlistEl.appendChild(playlistItemsContainer);

// ----- Logic -----
function removeVietnameseTones(str) {
  return str
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D")
    .toLowerCase()
    .trim()
    .replace(/\s+/g, " ");
}

function createPlaylistItem(filename) {
  const item = document.createElement("div");
  item.classList.add("playlist-item");
  item.textContent = filename.replace(/\.mp3$/, "");
  item.addEventListener("click", () => {
    const filePath = `saved_musics/${filename}`;
    music.src = filePath;
    music.play();
    icon.textContent = "‚è∏";
    songTitleEl.textContent = item.textContent;
    resetMarqueeAnimation(songTitleEl);
    playlistEl.classList.remove("show");
  });
  return item;
}

function renderPlaylistItems(filter = "") {
  playlistItemsContainer.innerHTML = "";
  const activeList = currentTab === "all" ? allSongs : favoriteSongs;
  const normalizedFilter = removeVietnameseTones(filter);

  const filtered = activeList.filter(filename =>
    removeVietnameseTones(filename).includes(normalizedFilter)
  );

  if (filtered.length === 0) {
    const noResult = document.createElement("div");
    noResult.classList.add("playlist-empty");
    noResult.textContent = "ƒê√âO C√ì!";
    playlistItemsContainer.appendChild(noResult);
  } else {
    filtered.forEach(filename => {
      playlistItemsContainer.appendChild(createPlaylistItem(filename));
    });
  }
}

// Tab chuy·ªÉn
allTabBtn.addEventListener("click", () => {
  currentTab = "all";
  allTabBtn.classList.add("active");
  favTabBtn.classList.remove("active");
  renderPlaylistItems(searchInput.value);
});

favTabBtn.addEventListener("click", () => {
  currentTab = "favorites";
  favTabBtn.classList.add("active");
  allTabBtn.classList.remove("active");
  renderPlaylistItems(searchInput.value);
});

// Search
searchInput.addEventListener("input", (e) => {
  renderPlaylistItems(e.target.value);
});

// Toggle playlist popup
moreBtn.addEventListener("click", (e) => {
  e.stopPropagation();
  playlistEl.classList.toggle("show");
  if (playlistEl.classList.contains("show")) searchInput.focus();
});

// ·∫®n khi click ra ngo√†i
document.addEventListener("click", (e) => {
  if (!playlistEl.contains(e.target) && !moreBtn.contains(e.target)) {
    playlistEl.classList.remove("show");
  }
});

// Kh·ªüi t·∫°o
renderPlaylistItems();

// ----- Marquee -----
function resetMarqueeAnimation(span) {
  const container = span.parentElement;
  span.style.animation = "none";
  void span.offsetWidth;
  const spanWidth = span.offsetWidth;
  const containerWidth = container.offsetWidth;
  const speed = 30;
  const duration = (spanWidth + containerWidth) / speed;
  span.style.animation = `marquee ${duration}s linear infinite`;
}
